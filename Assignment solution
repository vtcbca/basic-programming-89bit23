solution:1
import math

def factorial_math(n):
    return math.factorial(n)
n = 5
print(factorial_math(n))    

solution:2
import sympy

def is_prime_sympy(n):
    return sympy.isprime(n)
n = 29
print(is_prime_sympy(n))    

solution:3
def fibonacci_generator_terms(n):
    a, b = 0, 1
    for _ in range(n):
        yield a
        a, b = b, a + b
print(list(fibonacci_generator_terms(n_terms))) 

solution:4
def reverse_string_reversed(s):
    return ''.join(reversed(s))
s = "Hello, World!"
print(reverse_string_reversed(s))     

solution:5
def is_palindrome_reversed(s):
    # Remove non-alphanumeric characters and convert to lowercase
    s = ''.join(char.lower() for char in s if char.isalnum())
    return s == ''.join(reversed(s))
s = "A man, a plan, a canal, Panama!"
print(is_palindrome_reversed(s))

solution:6
def pattern_list_comprehension(n):
    for i in range(1, n + 1):
        print(' '.join(['*'] * i))
pattern_list_comprehension(n)

solution:7
def triangle_pattern_string_formatting(n):
    for i in range(1, n + 1):
        # Print spaces and numbers using string formatting
        row = ' ' * (n - i) + ' '.join(str(x) for x in range(1, 2 * i))
        print(row)
print("\nUsing string formatting:")
triangle_pattern_string_formatting(n)

solution:8
def alphabet_pattern_string_formatting(n):
    for i in range(1, n + 1):
        # Print leading spaces
        row = ' ' * (n - i)
        
        # Print the alphabet sequence (forward and backward)
        row += ' '.join(chr(64 + j) for j in range(1, i + 1))
        row += ' ' + ' '.join(chr(64 + j) for j in range(i - 1, 0, -1))
        
        print(row)
print("\nUsing string formatting:")
alphabet_pattern_string_formatting(n)
